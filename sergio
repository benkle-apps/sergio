#!/usr/bin/python3

from __future__ import annotations

import argparse
import os
import re
import subprocess
import sys
import time
import datetime
import shlex

import yaml
import warnings
import traceback

from string import Template
from pylxd import Client
from pylxd.models import Container as LxdContainer
from pylxd.exceptions import NotFound
from yaml import ScalarNode, SafeLoader
from typing import Union


warnings.filterwarnings('ignore')


def defaulting(obj: dict, key: str, default=None):
    if key in obj and obj[key] is not None:
        return obj[key]
    return default


def relate_path(base: str, path: str) -> str:
    if not os.path.isabs(path):
        path = os.path.abspath(os.path.join(base, path))
    return path


class StdClass:
    def __init__(self, **kwargs):
        for k, v in kwargs.items():
            setattr(self, k, v)


class Templating:
    def __init__(self, variables: dict):
        self.variables = variables

    def apply(self, template: str, container_variables: dict = None, rpc_variables: dict = None) -> str:
        if container_variables is None:
            container_variables = {}
        variables = {**container_variables, **self.variables}
        if rpc_variables is not None:
            variables = {**variables, **rpc_variables}
        t = Template(template)
        return t.safe_substitute(variables)


class ContainerLoader:
    def __init__(self, config_file: str, lxd: Client, output, log):
        with open(config_file, 'r+') as f:
            config = yaml.safe_load(f)
        self.config_dir = os.path.dirname(os.path.realpath(config_file))
        self.definitions_dir = relate_path(self.config_dir, config['definitions'])
        self.container = {}
        self.lxd = lxd
        self.output = output
        self.log = log
        self.templating = Templating(defaulting(config, 'variables', {}))
        self.backup_dir = relate_path(self.config_dir, config['backups'])

    def list(self) -> list:
        result = []
        for file in os.listdir(self.definitions_dir):
            if not file.endswith('.yml') and not file.endswith('.yaml'):
                continue
            result.append(file.replace('.yaml', '').replace('.yml', ''))
        return result

    def path(self, container_id: str) -> str:
        path = os.path.join(self.definitions_dir, f'{container_id}.yaml')
        if not os.path.exists(path):
            path = os.path.join(self.definitions_dir, f'{container_id}.yml')
        return path

    def get(self, container_id: str) -> Container:
        if container_id in self.container:
            return self.container[container_id]
        path = self.path(container_id)
        with open(path, 'r+') as f:
            data = yaml.safe_load(f)
        self.container[container_id] = Container(container_id, data['container'], loader=self, lxd=self.lxd)
        return self.container[container_id]

    def has(self, container: str) -> bool:
        return container in self.container or os.path.exists(self.path(container))


class Port:
    def __init__(self, data: dict, container: Container):
        self.container = container
        self.device = data['device'] if 'device' in data else 'eth0'
        self.protocol = data['protocol']
        self.from_port = data['from']
        self.to_port = data['to']
        self.comment = defaulting(data, 'comment', container.name)

    def delete(self):
        check = subprocess.check_output(['sudo', '-S', 'iptables', '-L', '-n', '-t', 'nat', '--line-numbers']) \
            .split(b'\n')
        existing_rules = [line.split(b' ')[0] for line in check if f'dpt:{self.to_port}' in str(line)]
        existing_rules.reverse()
        for existing_rule in existing_rules:
            subprocess.call(['sudo', '-S', 'iptables', '-t', 'nat', '-D', 'PREROUTING', existing_rule])

    def create(self):
        ip = self.get_ip()
        subprocess.call([
            'sudo', '-S', 'iptables', '-t', 'nat', '-A', 'PREROUTING', '-p', self.protocol, '-i', 'enp1s0f0',
            '--dport', str(self.to_port), '-j', 'DNAT', '--to-destination', f'{ip}:{self.from_port}', '-m',
            'comment', '--comment', self.comment
        ])

    def get_ip(self) -> str:
        return self.container.get_ip(self.device)


class Mountpoint:
    def __init__(self, name: str, data: dict, container: Container):
        self.container = container
        self.name = name
        self.source = data['source']
        self.path = data['path']

    def mount(self):
        if not self.is_mounted():
            source = self.container.loader.templating.apply(self.source, self.container.variables)
            os.makedirs(source, exist_ok=True)
            self.container.get_lxc().devices[self.name] = {
                'path': self.container.loader.templating.apply(self.path, self.container.variables),
                'source': source,
                'type': 'disk',
            }

    def is_mounted(self) -> bool:
        return self.name in self.container.get_lxc().devices


class ActionStack:
    actions: list[list[str]]

    def __init__(self, actions: list[str] = None):
        self.actions = [actions] if actions else []

    def __add__(self, other: ActionStack) -> ActionStack:
        result = ActionStack()
        for action in self.actions:
            result.actions.append(action)
        for action in other.actions:
            result.actions.append(action)
        return result

    def add_action(self, actions: list[str]):
        self.actions.append(actions)

    def exec(self, container: Container, loader: ContainerLoader, parameters: dict=None, position: int = -1):
        position = (len(self.actions) + position) % len(self.actions) # resolve ourselves to make counting easier
        idle = False
        for line in self.actions[position]:
            if '!idle' == line:
                idle = True
            elif '!parent' == line:
                if position == 0:
                    raise Exception('Ran out of stack')
                else:
                    self.exec(container, loader, parameters, position - 1)
            elif type(line) == str:
                line = loader.templating.apply(line, container.variables, parameters)
                container.log(line)
                if 0 != container.exec(line) and not idle:
                    raise Exception('Execution failed')
            elif isinstance(line, SpecialAction):
                line.call(container, loader, parameters)


class Container:
    id: str
    loader: ContainerLoader
    lxd: Client
    lxc: LxdContainer
    ips: dict[str, str]
    workdir: str
    name: str
    description: str
    box: str
    mountpoints: map[Mountpoint]
    ports: map[Port]
    requires: list[str]
    actions: dict[str, ActionStack]
    variables: dict[str, str]
    files: dict[str, str]
    shell: str
    user: str

    def __init__(self, cid: str, data: dict, loader: ContainerLoader, lxd: Client):
        self.id = cid
        self.loader = loader
        self.lxd = lxd
        self.lxc = None
        self.ips = None
        self.workdir = None

        self.name = data['name']
        self.description = data['description']
        self.ports = map(lambda port: Port(port, self), defaulting(data, 'ports', []))
        self.mountpoints = map(
            lambda mp: Mountpoint(mp[0], mp[1], self),
            defaulting(data, 'mountpoints', {}).items()
        )

        if 'extends' in data:
            parent = loader.get(data['extends'])
        else:
            parent = StdClass(box='', shell='/bin/sh', user='root')

        self.box = defaulting(data, 'box', parent.box)
        self.shell = defaulting(data, 'shell', parent.shell)
        self.user = defaulting(data, 'user', parent.user)

        self.requires = defaulting(data, 'requires', [])
        self.variables = defaulting(data, 'variables', {})
        self.files = defaulting(data, 'files', {})
        self.actions = {}
        for k, v in defaulting(data, 'actions', {}).items():
            self.actions[k] = ActionStack(v)

        if isinstance(parent, Container):
            self.requires += parent.requires
            self.variables = {**parent.variables, **self.variables}
            self.files = {**parent.files, **self.files}
            for action, action_stack in parent.actions.items():
                if action in self.actions:
                    self.actions[action] = action_stack + self.actions[action]
                else:
                    self.actions[action] = action_stack

        self.variables['_name'] = self.name
        self.variables['_description'] = self.name

    def check_requirements(self, can_start: bool = False, can_create: bool = False):
        requirements = self.get_launch_order()
        for requirement in requirements:
            requirement = self.loader.get(requirement)
            if can_create:
                requirement.create_or_start(True)
            elif not requirement.exists():
                self.log(f'Required container {requirement.name} ({requirement.id}) does not exist')
                return False
            elif not requirement.is_running() and can_start:
                requirement.start(True)
            elif not requirement.is_running():
                self.log(f'Required container {requirement.name} ({requirement.id}) is not running')
                return False
        return True

    def is_running(self) -> bool:
        try:
            return self.get_lxc().status == 'Running'
        except NotFound:
            return False

    def exists(self):
        return self.lxd.containers.exists(self.id)

    def get_launch_order(self):
        containers = {}
        launch_order = []
        for requirement in self.requires:
            requirement = self.loader.get(requirement)
            containers[requirement.id] = requirement.requires
        changes = True
        while changes:
            changes = False
            for container, requirements in list(containers.items()):
                for requirement in requirements:
                    if requirement not in containers:
                        requirement = self.loader.get(requirement)
                        containers[requirement.id] = requirement.requires
                        changes = True
        while containers:
            launchables = [container for container, requirements in containers.items() if [] == requirements]
            if not launchables:
                raise Exception('Unresolvable requirements')
            launchable = launchables.pop(0)
            launch_order.append(launchable)
            del containers[launchable]
            for container, requirements in containers.items():
                if launchable in requirements:
                    requirements.remove(launchable)
        return launch_order

    def log(self, message: str, file=sys.stdout):
        if self.loader.log:
            print(f'[{self.name}] {message}', file=file)

    def mount(self):
        for mountpoint in self.mountpoints:
            if not mountpoint.is_mounted():
                self.log(f'Mounting {mountpoint.name}')
                mountpoint.mount()
        self.get_lxc().save()

    def create_or_start(self, recursive: bool):
        if not self.exists():
            self.create(recursive)
        elif not self.is_running():
            self.start(recursive)

    def create(self, recursive: bool):
        self.log(f'Create new container {self.id} from {self.box}')
        if not self.check_requirements(recursive, recursive):
            raise Exception('Requirements not met')
        elif 0 == subprocess.call(['lxc', 'launch', self.box, self.id, '-v']):
            self.mount()
            self.log('Waiting for network to calm down')
            time.sleep(5)
            self.nat()
            self.execute_action('create')
            self.execute_action('start')
            self.log('Done')
        else:
            raise Exception(f'Creation failed')

    def destroy(self):
        try:
            if 'destroy' in self.actions and not self.is_running():
                self.start(True)
            if self.is_running():
                self.execute_action('stop')
                self.denat()
            if 'destroy' in self.actions:
                self.execute_action('destroy')
        except:
            pass
        subprocess.call(['lxc', 'delete', self.id, '-f'])

    def start(self, recursive: bool):
        if self.is_running():
            self.log('Already running')
        elif not self.check_requirements(recursive):
            raise Exception('Requirements not met')
        else:
            self.log('Starting...')
            self.get_lxc().start(wait=True)
            self.log('Waiting for network to calm down')
            time.sleep(5)
            self.nat()
            self.execute_action('start')
            self.log('Done')

    def stop(self):
        if self.is_running():
            self.log('Stopping...')
            self.execute_action('stop')
            self.denat()
            self.get_lxc().stop(wait=True)
            self.log('Done')
        else:
            self.log('Is not running')

    def nat(self):
        if not self.is_running():
            self.log('Container not running, no NAT needed')
            return
        for port in self.ports:
            self.log(f'Forwarding {port.protocol}:{port.to_port} to {port.get_ip()}:{port.from_port} ({port.device})')
            port.delete()
            port.create()

    def denat(self):
        for port in self.ports:
            self.log(
                f'Removing forward from {port.protocol}:{port.to_port} to {port.get_ip()}:{port.from_port} ({port.device})')
            port.delete()

    def exec(self, code: str = None) -> int:
        cmd = []
        if code is not None:
            if self.workdir:
                code = f'cd {self.workdir}; {code}'
            cmd = ['-c', code]
        output = None if self.loader.output else subprocess.DEVNULL
        return subprocess.call(
            ['lxc', 'exec', self.id, '--', 'sudo', '--login', '--user', self.user, self.shell] + cmd,
            stdout=output, stderr=output
        )

    def execute_action(self, action: str, parameters=None):
        if parameters is None:
            parameters = {}
        if action not in self.actions:
            self.log(f'Action "{action}" does not exist')
            return
        self.log(f'Execute action "{action}"')
        self.actions[action].exec(self, self.loader, parameters)

    def get_ip(self, device: str = 'eth0') -> str:
        if self.ips and device not in self.ips:
            raise Exception(f'Container {self.id} has no device {device}')
        self.ips = {}
        for dev, configs in self.get_lxc().state().network.items():
            self.ips[dev] = [c['address'] for c in filter(lambda c: 'inet' == c['family'], configs['addresses'])][0]
        return self.ips[device]

    def get_lxc(self) -> LxdContainer:
        if not self.lxc:
            self.lxc = self.lxd.containers.get(self.id)
        return self.lxc

    def login(self, directory=None):
        if not self.is_running():
            self.log('Not running')
            return
        elif directory is not None:
            self.workdir = directory
        self.exec(self.shell)

    def backup(self):
        if not self.is_running():
            self.log('Not running')
        elif 'backup' not in self.actions or self.actions['backup'] is None:
            self.log('No backup action')
        else:
            self.execute_action('backup')
            date = datetime.datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
            backup_file = os.path.join(self.loader.backup_dir, f'{self.id}_{date}.zip')
            with open(backup_file, 'wb+') as f:
                f.write(self.get_lxc().files.get('/tmp/backup.zip'))
            self.get_lxc().files.delete('/tmp/backup.zip')
            latest_file = os.path.join(self.loader.backup_dir, f'{self.id}_latest.zip')
            if os.path.exists(latest_file):
                os.remove(latest_file)
            os.symlink(os.path.basename(backup_file), latest_file)

    def restore(self, backup_file: str = None):
        if not self.is_running():
            self.log('Not running')
        if 'restore' not in self.actions or self.actions['restore'] is None:
            self.log('No restore action')
        else:
            backup_files = [
                               os.path.join(os.getcwd(), backup_file) if backup_file else None,
                               os.path.join(self.loader.backup_dir, backup_file) if backup_file else None,
                               os.path.join(self.loader.backup_dir, f'{self.id}_latest.zip')
                           ] + sorted([
                os.path.join(self.loader.backup_dir, file)
                for file in os.listdir(self.loader.backup_dir)
                if re.match(self.id + '_[0-9]{4}([-_][0-9]{2}){5}.zip', file)
            ])
            for backup_file in backup_files:
                if backup_file is not None and os.path.exists(backup_file):
                    with open(backup_file, 'rb+') as f:
                        self.get_lxc().files.put('/tmp/backup.zip', f.read(), mode=0o777)
                    try:
                        self.execute_action('restore')
                    except Exception as e:
                        pass
                    self.get_lxc().files.delete('/tmp/backup.zip')
                    break

    def download_file(self, source: str, target: str):
        if not self.is_running():
            self.log('Not running')
        elif '-' == target:
            print(self.get_lxc().files.get(source))
        else:
            with open(target, 'wb+') as f:
                f.write(self.get_lxc().files.get(source))

    def upload_file(self, source: str, target: str):
        if not self.is_running():
            self.log('Not running')
        else:
            content = sys.stdin if '-' == source else open(source, 'rb+')
            self.get_lxc().files.put(target, content.read(), mode=0o777)
            container.exec(f'sudo chown {container.user}:{container.user} {target}')
            content.close()



class SpecialAction:
    def __init__(self, node: Union[ScalarNode, list]):
        pass

    def call(self, container: Container, loader: ContainerLoader, rpc_variables: dict = None):
        pass


class Rpc(SpecialAction):
    def __init__(self, node: Union[ScalarNode, list]):
        super().__init__(node)
        value = node.value.split(' ') if type(node) == ScalarNode else node
        parameters = [f for f in filter(lambda a: a != '', value)]
        self.container = parameters.pop(0)
        self.action = parameters.pop(0)
        self.parameters = {}
        for parameter, value in map(lambda p: p.split('=', 2), parameters):
            self.parameters[parameter] = value

    def call(self, container: Container, loader: ContainerLoader, rpc_variables: dict = None):
        target = loader.get(container.id if 'self' == self.container else self.container)
        parameters = {}
        for parameter, value in self.parameters.items():
            parameters[parameter] = loader.templating.apply(value, container.variables, rpc_variables)
        parameters['caller'] = container.id
        target.execute_action(self.action, parameters)


class DumpFile(SpecialAction):
    def __init__(self, node: Union[ScalarNode, list]):
        super().__init__(node)
        self.filename = node.value if type(node) == ScalarNode else ''.join(node)

    def call(self, container: Container, loader: ContainerLoader, rpc_variables: dict = None):
        filename = loader.templating.apply(self.filename, container.variables, rpc_variables)
        container.log(f'Dropping file {filename}')
        container.get_lxc().execute(['mkdir', '-p', os.path.dirname(filename)])
        content = container.files[self.filename]
        if isinstance(content, LoadFile):
            content = content.read(loader)
        if isinstance(content, str):
            content = loader.templating.apply(content, container.variables, rpc_variables)
        container.get_lxc().files.put(filename, content)
        container.exec(f'sudo chown {container.user}:{container.user} {filename}')


class TransferFile(SpecialAction):
    def __init__(self, node: Union[ScalarNode, list]):
        super().__init__(node)
        parameters = shlex.split(node.value) if type(node) == ScalarNode else node
        match parameters.pop(0):
            case 'd' | 'down' | '<':
                self.direction = 'down'
            case 'u' | 'up' | '>':
                self.direction = 'up'
            case _:
                raise Exception('Bad direction for file transfer')
        self.container = parameters.pop(0)
        self.source = parameters.pop(0)
        self.target = parameters.pop(0)

    def call(self, container: Container, loader: ContainerLoader, rpc_variables: dict = None):
        target = loader.get(container.id if 'down' == self.direction else self.container)
        source = loader.get(container.id if 'up' == self.direction else self.container)
        target.get_lxc().files.put(self.target, source.get_lxc().files.get(self.source), mode=0o777)
        container.exec(f'sudo chown {target.user}:{target.user} {self.target}')


class RemoveFile(SpecialAction):
    def __init__(self, node: Union[ScalarNode, list]):
        super().__init__(node)
        self.filename = node.value if type(node) == ScalarNode else ''.join(node)

    def call(self, container: Container, loader: ContainerLoader, rpc_variables: dict = None):
        container.log(f'Removing file {self.filename}')
        try:
            container.get_lxc().files.delete(self.filename)
        except:
            pass


class SetWorkdir(SpecialAction):
    def __init__(self, node: Union[ScalarNode, list]):
        super().__init__(node)
        self.workdir = node.value if type(node) == ScalarNode else ''.join(node)

    def call(self, container: Container, loader: ContainerLoader, rpc_variables: dict = None):
        cwd = container.loader.templating.apply(self.workdir, container.variables, rpc_variables)
        container.log(f'Change work directory to {cwd}')
        container.workdir = cwd


class Echo(SpecialAction):
    def __init__(self, node: Union[ScalarNode, list]):
        super().__init__(node)
        self.text = node.value if type(node) == ScalarNode else ''.join(node)

    def call(self, container: Container, loader: ContainerLoader, rpc_variables: dict = None):
        container.log(container.loader.templating.apply(self.text, container.variables, rpc_variables))


class LoadFile:
    def __init__(self, node: ScalarNode):
        self.is_bytes = False
        value = str(node.value)
        if value.endswith(' b'):
            self.is_bytes = True
            value = value[:-2]
        elif value.endswith(' s'):
            value = value[:-2]
        self.filename = value

    def read(self, loader: ContainerLoader) -> Union[bytes, str]:
        mode = 'rb+' if self.is_bytes else 'r+'
        filenames = [
            os.path.abspath(self.filename),
            os.path.abspath(os.path.join(loader.config_dir, self.filename)),
            os.path.abspath(os.path.join(loader.definitions_dir, self.filename))
        ]
        result = None
        for filename in filenames:
            if not os.path.exists(filename):
                continue
            with open(filename, mode) as f:
                result = f.read()
            break
        if result is None:
            raise FileNotFoundError(self.filename)
        return result if self.is_bytes else result.encode('utf-8')


yaml.add_constructor('!rpc', lambda loader, node: Rpc(node), Loader=SafeLoader)
yaml.add_constructor('!df', lambda loader, node: DumpFile(node), Loader=SafeLoader)
yaml.add_constructor('!tf', lambda loader, node: TransferFile(node), Loader=SafeLoader)
yaml.add_constructor('!rm', lambda loader, node: RemoveFile(node), Loader=SafeLoader)
yaml.add_constructor('!cwd', lambda loader, node: SetWorkdir(node), Loader=SafeLoader)
yaml.add_constructor('!echo', lambda loader, node: Echo(node), Loader=SafeLoader)
yaml.add_constructor('!load', lambda loader, node: LoadFile(node), Loader=SafeLoader)
yaml.add_constructor('!idle', lambda loader, node: '!idle', Loader=SafeLoader)
yaml.add_constructor('!parent', lambda loader, node: '!parent', Loader=SafeLoader)


def main():
    possible_configs = [
        os.path.join(os.getcwd(), 'sergio.yml'),
        os.path.join(os.getcwd(), 'sergio.yaml'),
        os.path.join(os.getcwd(), 'config.yml'),
        os.path.join(os.getcwd(), 'config.yaml'),
        os.path.join(os.path.expanduser('~'), 'sergio.yml'),
        os.path.join(os.path.expanduser('~'), 'sergio.yaml'),
    ]

    parser = argparse.ArgumentParser(description='Manager/Provisioner for LXD')
    parser.add_argument('container',
                        metavar='CONTAINER', type=str,
                        help='Container to work on')
    parser.add_argument('verb',
                        metavar='VERB', type=str,
                        help='Operation to perform')
    parser.add_argument('parameters',
                        metavar='PARAMS', type=str, nargs="*",
                        help='Parameters for the operation')
    parser.add_argument('-o', '--output',
                        metavar='OUTPUTS', type=str, default='both',
                        help='Output modes (both, actions, log, none)')
    parser.add_argument('-c', '--config',
                        metavar='CONFIG', type=str, default=None,
                        help='Load a different config file')
    parser.add_argument('-r', '--recursive', action='store_true',
                        help='Start containers recursively')

    args = parser.parse_args()

    if args.config is None:
        for possible_config in possible_configs:
            if os.path.exists(possible_config):
                args.config = possible_config
                break
    if args.config is None:
        print('No config found', file=sys.stderr)
        return 1

    loader = ContainerLoader(os.path.abspath(args.config), Client(),
                             output=args.output in ['actions', 'both'], log=args.output in ['log', 'both'])
    container = loader.get(args.container)
    os.chdir(os.path.expanduser('~')) # We move to user home so avoid execution problems

    try:
        if 'create' == args.verb:
            container.create(args.recursive)
        elif 'destroy' == args.verb:
            container.destroy()
        elif 'start' == args.verb:
            container.start(args.recursive)
        elif 'stop' == args.verb:
            container.stop()
        elif 'running' == args.verb:
            return 0 if container.is_running() else 1
        elif 'nat' == args.verb:
            container.nat()
        elif 'denat' == args.verb:
            container.denat()
        elif 'login' == args.verb:
            container.login(args.parameters[0] if args.parameters else None)
        elif 'backup' == args.verb:
            container.backup()
        elif 'restore' == args.verb:
            container.restore(args.parameters[0] if args.parameters else None)
        elif 'download' == args.verb:
            container.download_file(*args.parameters)
        elif 'upload' == args.verb:
            container.upload_file(*args.parameters)
        elif 'exec' == args.verb:
            call = Rpc([container.id] + args.parameters)
            call.call(container, loader)
        else:
            call = Rpc([container.id] + [args.verb] + args.parameters)
            call.call(container, loader)
    except Exception as e:
        container.log(f'{e.__class__.__name__}: {e}', file=sys.stderr)
        for line in traceback.format_exc().split("\n"):
            container.log(f'{line}', file=sys.stderr)
        return 1

    return 0


if __name__ == '__main__':
    sys.exit(main())
